# Test and deploy

name:  CI

on:
  push:
    branches:
      - "**"
    tags:
      - "v*"
  workflow_dispatch:

env:
  OS: "linux"
  PYTHON_VERSION: "3.12"
  REQUIREMENTS_FILE: "requirements-all-linux-py3.12.txt"

jobs:
  check:
    name: "CI with ubuntu, py3.12, pip, pyside6"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "Install and upgrade"
        run: |
          python -m pip install --upgrade pip
          python -m pip install black~=25.0 ruff
      - name: "Format with black"
        run: black --check --diff "."
      - name: "Lint with ruff"
        run: ruff check --output-format=github "."

      # these libraries enable testing on Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      - name: "Install napari-locan and dependencies"
        run: |
          python -m pip install pyside6 .[test]
          python -m pip install mypy pandas-stubs coverage[toml] pip-tools
      - name: "Type check with mypy"
        run: mypy
      - name: "Run tests"
        uses: coactions/setup-xvfb@v1
        with:
          run: coverage run -m pytest --junitxml=./test-results-${{ env.PYTHON_VERSION }}.xml
      - name: "Prepare coverage reports"
        run: coverage xml
      - name: "Check coverage"
        run: coverage report --fail-under=80

      - name: "Upload coverage to CodeCov"
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: coverage.xml
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          name: "CodeCov report"
          verbose: true

      - name: "Freeze requirements"
        run: pip-compile pyproject.toml --extra test --output-file ${{ env.REQUIREMENTS_FILE }}
      - name: "Upload requirements file"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REQUIREMENTS_FILE }}
          path: ${{ env.REQUIREMENTS_FILE }}
